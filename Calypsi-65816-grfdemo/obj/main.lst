###############################################################################
#                                                                             #
# Calypsi ISO C compiler for 65816                              version 3.6.2 #
#                                                       31/Jul/2022  19:19:41 #
# Command line: --core=65816 --code-model=large --data-model=small            #
#               --target=Foenix -I ./include --speed -O2 --debug              #
#               --list-file=obj/main.lst -o obj/main.o src/main.c             #
#                                                                             #
###############################################################################

    \ 000000                      .rtmodel version,"1"
    \ 000000                      .rtmodel codeModel,"large"
    \ 000000                      .rtmodel dataModel,"small"
    \ 000000                      .rtmodel core,"65816"
    \ 000000                      .rtmodel huge,"0"
    \ 000000                      .rtmodel doubleSize,"32"
    \ 000000                      .rtmodel target,"foenix"
    \ 000000                      .extern ANSIClrScr
    \ 000000                      .extern ANSILocate
    \ 000000                      .extern _Dp
    \ 000000                      .extern _SInt32ToFloat32
    \ 000000                      .extern _Vfp
    \ 000000                      .extern clrBitmap
    \ 000000                      .extern printf
    \ 000000                      .extern sin
    \ 000000                      .extern time
    \ 000000                      .extern vickyBitmap
    \ 000000                      .extern vickyVideomode
0001                  // ----------------------------------------------------
0002                  // Source Code for Resolution Independent Graphics Primitives & Vicky II Wrapper Functions
0003                  // Theoretically It Should Work on Foenix c256 U, Foenix C256 u+, FMX
0004                  // By Ernesto Contreras
0005                  // June 2022
0006                  // ----------------------------------------------------
0007
0008                  #include <stdio.h>
0009                  #include <stdlib.h>
0010                  #include <string.h>
0011                  #include <dma.h>
0012                  #include <time.h>
0013                  #include <math.h>
0014                  #include "support.h"
0015                  #include "vickyGraph.h"
0016
0017                  // Demo Helper functions
0018                  int setupScreen(int mode);
0019                  void delay(int delay);
0020                  void shake(int repetitions);
0021
0022                  // Global Variables that hold screen resolution / current bitmap page / maxVickyMemory 
0023                  long extern vickyResX;
0024                  long extern vickyResY;
0025
0026                  // ----------------------
0027                  // Main demo 
0028                  // ----------------------
0029
0030                  int main ()
0031                  {
    \ 000000                      .section farcode,text
    \ 000000                      .public main
    \ 000000 5a       main:       phy
    \ 000001 5a                   phy
0032                    int xRndInit;
0033                    int xRndMid;
0034                    int xRndMid2;
0035                    int xRndEnd;
0036                    int yRndInit;
0037                    int yRndMid;
0038                    int yRndMid2;
0039                    int yRndEnd;
0040                    int colRnd;
0041                    int c,d,e;
0042                    char option;
0043                    ANSIClrScr();
    \ 000002 22......             jsl     long:ANSIClrScr
0044
0045                  	if (setupScreen(1)==0)
    \ 000006 a90100               lda     ##1
    \ 000009 22......             jsl     long:setupScreen
    \ 00000d 1a                   inc     a
    \ 00000e 3a                   dec     a
    \ 00000f d04d                 bne     `?L8`
0046                  	{
0047                  		ANSIClrScr();
    \ 000011 22......             jsl     long:ANSIClrScr
0048                  		clrBitmap();
    \ 000015 22......             jsl     long:clrBitmap
0049                  	   /*
0050                  		c=time(NULL);
0051                  		srand(c); */
0052                  		for (c=1;c<=90;c++)
    \ 000019 a90100               lda     ##1
    \ 00001c 8303     `?L57`:     sta     3,s
    \ 00001e a95a00               lda     ##90
    \ 000021 38                   sec
    \ 000022 e303                 sbc     3,s
    \ 000024 5003                 bvc     `?L39`
    \ 000026 490080               eor     ##-32768
    \ 000029 100c     `?L39`:     bpl     `?L11`
0053                  		{
0054                  			printf ("sin (%d)=%f\r",c,sin(c));
0055                  		}
0056                  		
0057                  		//plot_arc(100,100,20, 90,180,128);
0058                  		
0059                  		/*
0060                  		printf("Palette Test...\r");
0061                  		 for (e=1;e<=5;e++)
0062                  		 {
0063                  			if (e!=5)
0064                  			// randomize palette
0065                  			{
0066                  				for (c=0;c<=255;c++)
0067                  				{
0068                  					vickyPaletteCol (0, c, rand() % 255, rand() % 255, rand() % 255, 255);
0069                  				}
0070                  			}
0071                  			else 
0072                  				vickyDefPalette();		
0073                  			// paint pixel color bar
0074                  			for (c=0;c<=255;c++)
0075                  			{
0076                  				for (d=0;d<20;d++)
0077                  					plot (c+50, d+(e*50), c);
0078                  			} 
0079                  		 }
0080                  		  clrBitmap();
0081                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0082                  		  ANSILocate(1,1);
0083                  		printf("200 Lines...\n\r");
0084                  		 for (c=0;c<=200;c++)
0085                  		  {
0086                  			xRndInit=rand() % (int)vickyResX;
0087                  			xRndEnd=rand() % (int)vickyResX;
0088                  			yRndInit=rand() % (int)vickyResY;
0089                  			yRndEnd=rand() % (int)vickyResY;
0090                  			colRnd=rand() % 255;
0091                  			plot_line (xRndInit, yRndInit, xRndEnd, yRndEnd, colRnd);
0092                  		  } 
0093                  		  clrBitmap();
0094                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0095                  		  ANSILocate(1,1);
0096                  		 printf("100 Bezier Lines...\n\r");
0097                  		 for (c=0;c<=100;c++)
0098                  		  {
0099                  			xRndInit=rand() % (int)vickyResX;
0100                  			xRndEnd=rand() % (int)vickyResX;
0101                  			xRndMid=rand() % (int)vickyResX;
0102                  			xRndMid2=rand() % (int)vickyResX;
0103                  			yRndInit=rand() % (int)vickyResY;
0104                  			yRndMid=rand() % (int)vickyResY;
0105                  			yRndMid2=rand() % (int)vickyResY;
0106                  			yRndEnd=rand() % (int)vickyResY;
0107                  			colRnd=rand() % 255;
0108                  			plot_bezier (xRndInit, yRndInit, xRndMid, yRndMid,  xRndMid2, yRndMid2, xRndEnd, yRndEnd, colRnd);
0109                  		  } 
0110                  		  clrBitmap();
0111                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0112                  		  ANSILocate(1,1);
0113                  		  printf("50 Rectangles...\n\r");
0114                  		  for (c=0;c<=50;c++)
0115                  		  {
0116                  			xRndInit=rand() % (int)vickyResX;
0117                  			xRndEnd=rand() % (int)vickyResX;
0118                  			xRndMid=rand() % (int)vickyResX;
0119                  			yRndMid=rand() % (int)vickyResY;
0120                  			yRndInit=(rand() % (int)vickyResY);
0121                  			yRndEnd=(rand() % (int)vickyResY);
0122                  			colRnd=rand() % 255;
0123                  			plot_rectangle (xRndInit, yRndInit, xRndEnd, yRndEnd, colRnd);
0124                  		  } 
0125                  		  clrBitmap();
0126                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0127                  		  ANSILocate(1,1);
0128                  		  printf("50 Circles...\n\r");
0129                  		 for (c=0;c<=50;c++)
0130                  		  {
0131                  			xRndInit=rand() % (int)vickyResX;
0132                  			yRndInit=rand() % (int)vickyResY;
0133                  			yRndMid=(rand() % (int)vickyResY);
0134                  			colRnd=rand() % 255;
0135                  			plot_circle (xRndInit, yRndInit, (yRndMid / 2),colRnd);
0136                  		  } 
0137                  		  clrBitmap();
0138                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0139                  		  ANSILocate(1,1);
0140                   		  printf("50 Ellipses...\n\r");
0141                  		  for (c=0;c<=50;c++)
0142                  		  {
0143                  			xRndInit=rand() % (int)vickyResX;
0144                  			xRndEnd=rand() % (int)vickyResX;
0145                  			xRndMid=rand() % (int)vickyResX;
0146                  			yRndMid=rand() % (int)vickyResY;
0147                  			yRndInit=rand() % (int)vickyResY;
0148                  			yRndEnd=rand() % (int)vickyResY;
0149                  			colRnd=rand() % 255;
0150                  			plot_ellipse (xRndInit, yRndInit, xRndEnd/2, yRndEnd/2, colRnd);
0151                  		  }
0152                  		  clrBitmap();
0153                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0154                  		  ANSILocate(1,1);
0155                   		  printf("30 Solid Ellipses... \n\r");
0156                  		  for (c=0;c<=30;c++)
0157                  		  {
0158                  			xRndInit=rand() % (int)vickyResX;
0159                  			xRndEnd=rand() % (int)vickyResX;
0160                  			xRndMid=rand() % (int)vickyResX;
0161                  			yRndMid=rand() % (int)vickyResY;
0162                  			yRndInit=rand() % (int)vickyResY;
0163                  			yRndEnd=rand() % (int)vickyResY;
0164                  			colRnd=rand() % 255;
0165                  			plot_solid_ellipse (xRndInit, yRndInit, xRndEnd / 2, yRndEnd / 2, colRnd);
0166                  		  }
0167                  		  clrBitmap();
0168                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0169                  		  ANSILocate(1,1);
0170                  		 printf("30 Solid circles... \n\r");
0171                  		 srand(time(NULL)); 
0172                  		 for (c=0;c<=30;c++)
0173                  		  {
0174                  			xRndInit=rand() % (int)vickyResX;
0175                  			yRndInit=rand() % (int)vickyResY;
0176                  			yRndMid=rand() % (int)vickyResY;
0177                  			colRnd=rand() % 255;
0178                  			plot_solid_circle (xRndInit, yRndInit, yRndMid / 2,colRnd);
0179                  		  } 
0180                  		  clrBitmap();
0181                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0182                  		  ANSILocate(1,1);
0183                  		  printf("300 Solid Rectangles...\n\r");
0184                  		  	  for (c=0;c<=300;c++)
0185                  		  {
0186                  			xRndInit=rand() % (int)vickyResX;
0187                  			xRndEnd=rand() % (int)vickyResX;
0188                  			xRndMid=rand() % (int)vickyResX;
0189                  			yRndMid=rand() % (int)vickyResY;
0190                  			yRndInit=rand() % (int)vickyResY;
0191                  			yRndEnd=rand() % (int)vickyResY;
0192                  			colRnd=rand() % 255;
0193                  			plot_solid_rectangle (xRndInit, yRndInit, xRndEnd, yRndEnd, colRnd);
0194                  		  } 
0195                  		  
0196                  		  clrBitmap();
0197                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0198                  		  ANSILocate(1,1);
0199                  		  printf("10 Flood Filled Circles...\n\r");
0200                  		  for (c=0;c<=10;c++)
0201                  		  {
0202                  			xRndInit=rand() % (int)vickyResX;
0203                  			yRndInit=rand() % (int)vickyResY;
0204                  			yRndMid=rand() % (int)vickyResY;
0205                  			colRnd=rand() % 255;
0206                  			plot_circle (xRndInit, yRndInit, (yRndMid / 2),colRnd);
0207                  			colRnd=rand() % 255;
0208                  			floodFill (xRndInit, yRndInit,colRnd);
0209                  		  } 
0210                  		  clrBitmap();
0211                  		  c=vickyVideomode (true,false,false,false,false,false,false,0);
0212                  		  ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
0213                  		  ANSILocate(1,1);
0214                  		  */
0215                  		  printf("Thx for watching this demo\n\r");
    \ 00002b a9....               lda     ##`_StringLiteral_[84,104,120,32,102,111,114,32,119,97,116,99,104,105,110,103,32,116,104,105,115,32,100,101,109,111,10,13]`
    \ 00002e 22......             jsl     long:printf
0216                  		  return 0;
    \ 000032 a90000               lda     ##0
    \ 000035 802a                 bra     `?L7`
    \ 000037 a303     `?L11`:     lda     3,s
    \ 000039 a20000               ldx     ##0
    \ 00003c a8                   tay
    \ 00003d 1001                 bpl     `?L42`
    \ 00003f ca                   dex
    \ 000040          `?L42`:
    \ 000040 22......             jsl     long:_SInt32ToFloat32
    \ 000044 22......             jsl     long:sin
    \ 000048 da                   phx
    \ 000049 48                   pha
    \ 00004a a307                 lda     7,s
    \ 00004c 48                   pha
    \ 00004d a9....               lda     ##`_StringLiteral_[115,105,110,32,40,37,100,41,61,37,102,13]`
    \ 000050 22......             jsl     long:printf
    \ 000054 8307                 sta     7,s
    \ 000056 68                   pla
    \ 000057 68                   pla
    \ 000058 68                   pla
    \ 000059 a303                 lda     3,s
    \ 00005b 1a                   inc     a
    \ 00005c 80be                 bra     `?L57`
    \ 00005e          `?L8`:
0217                    } // screen
0218                    else {return -1;}
    \ 00005e a9ffff               lda     ##-1
    \ 000061          `?L7`:
0219                  }
    \ 000061 7a                   ply
    \ 000062 7a                   ply
    \ 000063 6b                   rtl
0220
0221                  // ----------------------------------------
0222                  // Helper functions 
0223                  // ----------------------------------------
0224
0225                  // ----------------------------------------
0226                  // Setup Graphic Screen
0227                  // ----------------------------------------
0228                  int setupScreen(int mode)
0229                  {
    \ 000000                      .section farcode,text
    \ 000000                      .public setupScreen
    \ 000000          setupScreen:
    \ 000000 5a                   phy
    \ 000001 5a                   phy
0230                  	int status;
0231                  	// VickyVideoMode (bool text,bool txtOverlay,bool bitmap,bool tiles,bool sprites,bool gammaFix,bool blank,int resolution {0-640x480|1-800x600|2-320x240|3-400x300})
0232                  	status=vickyVideomode (true,true,true,false,true,true,false,mode);
    \ 000002 48                   pha
    \ 000003 f40000               pea     ##0
    \ 000006 f40100               pea     ##1
    \ 000009 f40100               pea     ##1
    \ 00000c f40000               pea     ##0
    \ 00000f a20100               ldx     ##1
    \ 000012 86..                 stx     dp:.tiny (_Dp+2)
    \ 000014 86..                 stx     dp:.tiny _Dp
    \ 000016 8a                   txa
    \ 000017 22......             jsl     long:vickyVideomode
    \ 00001b aa                   tax
    \ 00001c 3b                   tsc
    \ 00001d 18                   clc
    \ 00001e 690a00               adc     ##10
    \ 000021 1b                   tcs
    \ 000022 8a                   txa
    \ 000023 8303                 sta     3,s
0233                  	// VickyBitmap (int page {0-1}, bool enable, long address {0-0x1fffff (2 Mb)| 0-0x3fffff (4 Mb)}, int lut {0-7}, bool collision)
0234                  	if (status!=-1)
    \ 000025 a303                 lda     3,s
    \ 000027 c9ffff               cmp     ##-1
    \ 00002a f04a                 beq     `?L20`
0235                  	{
0236                  		status=vickyBitmap (0,true,0,0,false);
    \ 00002c f40000               pea     ##0
    \ 00002f 64..                 stz     dp:.tiny (_Dp+2)
    \ 000031 a20100               ldx     ##1
    \ 000034 86..                 stx     dp:.tiny _Dp
    \ 000036 a90000               lda     ##0
    \ 000039 85..                 sta     dp:.tiny (_Dp+4)
    \ 00003b 85..                 sta     dp:.tiny (_Dp+6)
    \ 00003d 22......             jsl     long:vickyBitmap
    \ 000041 aa                   tax
    \ 000042 68                   pla
    \ 000043 8a                   txa
    \ 000044 8303                 sta     3,s
0237                  		if (status==0)
    \ 000046 a303                 lda     3,s
    \ 000048 d01d                 bne     `?L23`
0238                  		{
0239                  			ANSIClrScr();           // Clear Text screen after switching resolution (for sanity!)
    \ 00004a 22......             jsl     long:ANSIClrScr
0240                  			ANSILocate(1,1);		// Locate cursor at 1,1
    \ 00004e a20100               ldx     ##1
    \ 000051 86..                 stx     dp:.tiny _Dp
    \ 000053 8a                   txa
    \ 000054 22......             jsl     long:ANSILocate
0241                  			// Set Border size to 0 
0242                  			BORDER_CTRL_REG = 0;
    \ 000058 e220                 sep     #32
    \ 00005a a900                 lda     #0
    \ 00005c 8f0400af             sta     long:11468804
    \ 000060 c220                 rep     #32
0243                  			return 0;
    \ 000062 a90000               lda     ##0
    \ 000065 801c                 bra     `?L19`
    \ 000067          `?L23`:
0244                  		}
0245                  		else 
0246                  		{
0247                  			printf ("Error %d while setting bitmap",status);
    \ 000067 48                   pha
    \ 000068 a9....               lda     ##`_StringLiteral_Error %d while setting bitmap`
    \ 00006b 22......             jsl     long:printf
    \ 00006f 8303                 sta     3,s
0248                  			return status;
    \ 000071 68                   pla
    \ 000072 a303                 lda     3,s
    \ 000074 800d                 bra     `?L19`
    \ 000076          `?L20`:
0249                  		} //Error setting Bitmap
0250                  	}
0251                  	else 
0252                  	{
0253                  		printf ("Error %d while setting VideoMode",status);
    \ 000076 48                   pha
    \ 000077 a9....               lda     ##`_StringLiteral_Error %d while setting VideoMode`
    \ 00007a 22......             jsl     long:printf
    \ 00007e 8303                 sta     3,s
0254                  		return status;
    \ 000080 68                   pla
    \ 000081 a303                 lda     3,s
    \ 000083          `?L19`:
0255                  	} //Error setting videomode
0256                  }
    \ 000083 7a                   ply
    \ 000084 7a                   ply
    \ 000085 6b                   rtl
0257
0258                  // ----------------------------------------
0259                  // Delay Function
0260                  // credits https://www.quora.com/How-do-you-use-the-time-delay-in-C-programming
0261                  // ----------------------------------------
0262
0263                  void delay(int delay) 
0264                  { 
    \ 000000                      .section farcode,text
    \ 000000                      .public delay
    \ 000000 a8       delay:      tay
    \ 000001 3b                   tsc
    \ 000002 38                   sec
    \ 000003 e90a00               sbc     ##10
    \ 000006 1b                   tcs
    \ 000007 98                   tya
    \ 000008 8301                 sta     1,s
0265                   int now=time(NULL); 
    \ 00000a a20000               ldx     ##0
    \ 00000d 86..                 stx     dp:.tiny _Dp
    \ 00000f 3b                   tsc
    \ 000010 18                   clc
    \ 000011 690300               adc     ##3
    \ 000014 22......             jsl     long:time
    \ 000018 a303                 lda     3,s
    \ 00001a aa                   tax
0266                   int later=now+delay; 
    \ 00001b 8a                   txa
    \ 00001c 18                   clc
    \ 00001d 6301                 adc     1,s
    \ 00001f 8301                 sta     1,s
    \ 000021          `?L32`:
0267                  	while(now<=later)
    \ 000021 a301                 lda     1,s
    \ 000023 86..                 stx     dp:.tiny _Dp
    \ 000025 38                   sec
    \ 000026 e5..                 sbc     dp:.tiny _Dp
    \ 000028 5003                 bvc     `?L54`
    \ 00002a 490080               eor     ##-32768
    \ 00002d 3013     `?L54`:     bmi     `?L31`
0268                  	    now=time(NULL); 
    \ 00002f a20000               ldx     ##0
    \ 000032 86..                 stx     dp:.tiny _Dp
    \ 000034 3b                   tsc
    \ 000035 18                   clc
    \ 000036 690300               adc     ##3
    \ 000039 22......             jsl     long:time
    \ 00003d a303                 lda     3,s
    \ 00003f aa                   tax
    \ 000040 80df                 bra     `?L32`
    \ 000042          `?L31`:
0269                  } 
    \ 000042 3b                   tsc
    \ 000043 18                   clc
    \ 000044 690a00               adc     ##10
    \ 000047 1b                   tcs
    \ 000048 6b                   rtl
    \ 000000                      .section cdata,rodata
    \ 000000                      .pubweak `_StringLiteral_Error %d while setting VideoMode`
    \ 000000          `_StringLiteral_Error %d while setting VideoMode`:
    \ 000000 4572726f             .byte   69,114,114,111,114,32,37,100,32,119,104,105,108,101,32,115,101,116,116,105,110,103,32,86,105,100,101,111,77,111,100,101,0
    \ 000004 72202564
    \ 000008 20776869
    \ 00000c 6c652073
    \ 000010 65747469
    \ 000014 6e672056
    \ 000018 6964656f
    \ 00001c 4d6f6465
    \ 000020 00
    \ 000000                      .section cdata,rodata
    \ 000000                      .pubweak `_StringLiteral_Error %d while setting bitmap`
    \ 000000          `_StringLiteral_Error %d while setting bitmap`:
    \ 000000 4572726f             .byte   69,114,114,111,114,32,37,100,32,119,104,105,108,101,32,115,101,116,116,105,110,103,32,98,105,116,109,97,112,0
    \ 000004 72202564
    \ 000008 20776869
    \ 00000c 6c652073
    \ 000010 65747469
    \ 000014 6e672062
    \ 000018 69746d61
    \ 00001c 7000
    \ 000000                      .section cdata,rodata
    \ 000000                      .pubweak `_StringLiteral_[84,104,120,32,102,111,114,32,119,97,116,99,104,105,110,103,32,116,104,105,115,32,100,101,109,111,10,13]`
    \ 000000          `_StringLiteral_[84,104,120,32,102,111,114,32,119,97,116,99,104,105,110,103,32,116,104,105,115,32,100,101,109,111,10,13]`:
    \ 000000 54687820             .byte   84,104,120,32,102,111,114,32,119,97,116,99,104,105,110,103,32,116,104,105,115,32,100,101,109,111,10,13,0
    \ 000004 666f7220
    \ 000008 77617463
    \ 00000c 68696e67
    \ 000010 20746869
    \ 000014 73206465
    \ 000018 6d6f0a0d
    \ 00001c 00
    \ 000000                      .section cdata,rodata
    \ 000000                      .pubweak `_StringLiteral_[115,105,110,32,40,37,100,41,61,37,102,13]`
    \ 000000          `_StringLiteral_[115,105,110,32,40,37,100,41,61,37,102,13]`:
    \ 000000 73696e20             .byte   115,105,110,32,40,37,100,41,61,37,102,13,0
    \ 000004 28256429
    \ 000008 3d25660d
    \ 00000c 00

##########################
#                        #
# Memory sizes (decimal) #
#                        #
##########################

Executable  (Text): 307 bytes
Constant          : 105 bytes
